{"version":3,"sources":["components/Controls/Controls.js","components/Card/Card.js","utils/api.js","utils/apiHelper.js","utils/dataCleaner.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Controls","_ref","favCount","activeCategory","setActiveCategory","buttons","map","name","buttonClass","buttonText","concat","react_default","a","createElement","className","key","onClick","Card","card","toggleFavorite","favorite","statLines","Object","keys","filter","stat","cardClass","fetchData","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","fetch","sent","ok","json","abrupt","Error","status","stop","this","_x","apply","arguments","getFilm","films","randomNum","_films$results$random","title","opening_crawl","release_date","Math","floor","random","count","results","getHomeworld","_ref2","_callee2","homeworld","_context2","population","getSpecies","_ref3","_callee3","urls","species","_context3","length","_x2","getResidents","_ref4","_callee5","residents","_context5","Promise","all","_ref5","_callee4","resident","_context4","_x4","_x3","getLocalStorage","reduce","newState","localStorage","getItem","JSON","parse","setLocalStorage","forEach","setItem","stringify","getPopulationAbbreviation","log10","parseInt","slice","cleanPeople","people","cleanedPeople","person","birth_year","populationKey","populationAbbrev","helper","category","Homeworld","defineProperty","cleanPlanets","_ref6","planets","cleanedPlanets","_ref7","planet","terrain","climate","_ref8","acc","index","Terrain","Population","Climate","Residents","cleanVehicles","vehicles","vehicle","Model","model","Class","vehicle_class","Passenger Capacity","passengers","Cost","cost_in_credits","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","film","storedState","setState","objectSpread","t0","errorStatus","message","categoryName","pageData","data","pageCount","_pageCount","state","api","cleanData","ceil","favorites","currentPage","uncleanData","clean","getCards","cardInfo","Card_Card","getPageButtons","_this$state","getNextPage","_newState$categoryNam","unshift","toConsumableArray","_x5","newArray","categoryItem","updateFavorites","_x6","newFavorites","favoritedCard","_this2","_this$state2","Controls_Controls","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb12ebaf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Controls = ({ favCount, activeCategory, setActiveCategory }) => {\n  const buttonNames = ['people', 'planets', 'vehicles', 'favorites'];\n  const buttons = buttonNames.map(name => {\n    const buttonClass = name === activeCategory ? 'button--active' : 'button';\n    const buttonText = name === 'favorites' ? `favorites ${favCount}` : name;\n    return (\n      <button\n        className={buttonClass}\n        key={name}\n        onClick={() => setActiveCategory(name)}\n      >\n        {buttonText}\n      </button>\n    );\n  });\n  return <nav className=\"Controls\">{buttons}</nav>;\n}\n\nControls.propTypes = {\n  favCount: PropTypes.number,\n  activeCategory: PropTypes.string,\n  setActiveCategory: PropTypes.func\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Card = ({ card, toggleFavorite }) => {\n  const { favorite } = card;\n  const displayedStats = Object.keys(card).filter(stat => {\n    return stat !== 'category' && stat !== 'favorite';\n  }); \n  const statLines = displayedStats.map(stat => {\n    return stat === 'name' ?\n      <h3 className=\"h3\" key={stat}>{card.name}</h3> :\n      <p className=\"p--stat\" key={stat}>\n        <span className=\"span span--key\">{stat}:</span>\n        <span className=\"span span--value\">{card[stat]}</span>\n      </p>\n  });\n  const cardClass = favorite ? 'Card--fav' : 'Card'\n  const buttonClass = favorite ? 'button--fav' : 'button'\n  return (\n    <div className={cardClass}>\n      {statLines}\n      <button className={buttonClass} onClick={() => toggleFavorite(card)}>\n        {favorite ? 'Remove from Favorites' : 'Add to Favorites'}\n      </button>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  card: PropTypes.object,\n  toggleFavorite: PropTypes.func\n}","export const fetchData = async (url) => {\n  const response = await fetch(url);\n  if (response.ok) {\n    return await response.json();\n  } else {\n    throw Error(`Error fetching data from ${url}. ${response.status}`);\n  }\n}","import { fetchData } from './api';\n\nexport const getFilm = async () => {\n  const films = await fetchData('https://swapi.co/api/films/');\n  const randomNum = Math.floor(Math.random() * films.count);\n  const { title, opening_crawl, release_date } = films.results[randomNum];\n  return { title, opening_crawl, release_date };\n}\n\nexport const getHomeworld = async (url) => {\n  const homeworld = await fetchData(url);\n  return ({\n    homeworld: homeworld.name,\n    population: homeworld.population\n  });\n}\n\nexport const getSpecies = async (urls) => {\n  if (urls.length > 0) {\n    const species = await fetchData(urls[0]);;\n    return { species: species.name };\n  }\n  return { species: 'unknown' };\n}\n\nexport const getResidents = async (urls) => {\n  if (urls.length > 0) {\n    const residents = await Promise.all(\n      urls.map(async url => {\n        const resident = await fetchData(url);\n        return resident.name;\n      })\n    );\n    return { residents };\n  }\n  return { residents: ['unknown'] }\n}\n\nexport const getLocalStorage = () => {\n  const keys = ['people', 'planets', 'vehicles', 'favorites', 'pageData'];\n  const storedState = keys.reduce((newState, key) => {\n    if (localStorage.getItem(key)) {\n      newState[key] = JSON.parse(localStorage.getItem(key));\n    }\n    return newState;\n  }, {});\n  return storedState;\n}\n\nexport const setLocalStorage = (newState) => {\n  Object.keys(newState).forEach(key => {\n    localStorage.setItem([key], JSON.stringify(newState[key]));\n  })\n}","import * as helper from './apiHelper';\n\nexport const getPopulationAbbreviation = (population) => {\n  const populationLog1000 = Math.floor(Math.log10(parseInt(population)) / 3);\n  switch (populationLog1000) {\n    case 1:\n      return population.slice(0, -3) + ' thousand';\n    case 2:\n      return population.slice(0, -6) + ' million';\n    case 3:\n      return population.slice(0, -9) + ' billion';\n    case 4:\n      return population.slice(0, -12) + ' trillion';\n    default:\n      return 'unknown';\n  }\n}\n\nexport const cleanPeople = async (people) => {\n  const cleanedPeople = await Promise.all(\n    people.map(async person => {\n      const { name, birth_year } = person;\n      const { homeworld, population } = (\n        await helper.getHomeworld(person.homeworld)\n      );\n      const { species } = await helper.getSpecies(person.species);\n      const populationKey = `Population of ${homeworld}`;\n      const populationAbbrev = getPopulationAbbreviation(population);\n      return {\n        name,\n        favorite: false,\n        category: 'people',\n        Homeworld: homeworld,\n        [populationKey]: populationAbbrev,\n        Species: species,\n        'Year of birth': birth_year\n      };\n    })\n  );\n  return { people: cleanedPeople };\n}\n\nexport const cleanPlanets = async (planets) => {\n  const cleanedPlanets = await Promise.all(\n    planets.map(async planet => {\n      const { name, terrain, population, climate } = planet;\n      const populationAbbrev = getPopulationAbbreviation(population);\n      let { residents } = await helper.getResidents(planet.residents);\n      residents = residents.reduce((acc, resident, index) => {\n        if (index === residents.length - 1 && index > 1) {\n          acc += `, and ${resident}`;\n        } else if (index === residents.length - 1 && index === 1) {\n          acc += ` and ${resident}`;\n        } else if (index > 0) {\n          acc += `, ${resident}`;\n        }\n        return acc;\n      }, residents[0]);\n      return ({\n        name,\n        favorite: false,\n        category: 'planets',\n        Terrain: terrain,\n        Population: populationAbbrev,\n        Climate: climate,\n        Residents: residents\n      });\n    })\n  );\n  return { planets: cleanedPlanets };\n}\n\nexport const cleanVehicles = (vehicles) => {\n  const cleanedVehicles = vehicles.map(vehicle => {\n    const { name, model, vehicle_class, passengers, cost_in_credits } = vehicle\n    return {\n      name,\n      favorite: false,\n      category: 'vehicles',\n      Model: model,\n      Class: vehicle_class,\n      'Passenger Capacity': passengers,\n      Cost: cost_in_credits\n    };\n  });\n  return { vehicles: cleanedVehicles };\n}","import React, { Component } from 'react';\nimport { Controls } from '../Controls/Controls';\nimport { Card } from '../Card/Card';\nimport * as api from '../../utils/api';\nimport * as clean from '../../utils/dataCleaner';\nimport * as helper from '../../utils/apiHelper';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeCategory: '',\n      film: {},\n      people: [],\n      planets: [],\n      vehicles: [],\n      favorites: [],\n      currentPage: 0,\n      pageData: {}\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const film = await helper.getFilm();\n      const storedState = helper.getLocalStorage();\n      this.setState({ film, ...storedState });\n    } catch (error) {\n      this.setState({ errorStatus: error.message });\n    }\n  }\n\n  setActiveCategory = async (categoryName) => {\n    try {\n      const { pageData } = this.state;\n      let newState = {};\n      const length = this.state[categoryName].length;\n      if (categoryName !== 'favorites' && length === 0) {\n        const data = await api.fetchData(\n          `https://swapi.co/api/${categoryName}/`\n        );\n        newState = await this.cleanData(categoryName, data.results);\n        const pageCount = Math.ceil(data.count / 10);\n        newState.pageData = { ...pageData, [categoryName]: pageCount };\n        helper.setLocalStorage(newState);\n      } else if (categoryName === 'favorites') {\n        const pageCount = Math.ceil(this.state.favorites.length / 10);\n        newState.pageData = { ...pageData, [categoryName]: pageCount };\n      }\n      this.setState({\n        ...newState,\n        activeCategory: categoryName,\n        currentPage: 1\n      });\n    } catch (error) {\n      this.setState({ errorStatus: error.message });\n    }\n  }\n\n  cleanData = async (categoryName, uncleanData) => {\n    switch (categoryName) {\n      case 'people':\n        return clean.cleanPeople(uncleanData);\n      case 'planets':\n        return clean.cleanPlanets(uncleanData);\n      case 'vehicles':\n        return clean.cleanVehicles(uncleanData);\n      default:\n        break;\n    }\n  }\n\n  getCards = (categoryName) => {\n    if (this.state[categoryName].length === 0) {\n      return <p className=\"h3--no-fav\">nothing to display</p>\n    }\n    const { currentPage } = this.state;\n    return this.state[categoryName].filter((cardInfo, index) => {\n      return index < currentPage * 10 && index >= (currentPage - 1) * 10;\n    }).map(cardInfo => {\n      return (\n        <Card\n          key={cardInfo.name}\n          card={cardInfo}\n          toggleFavorite={this.toggleFavorite}\n        />\n      );\n    });\n  }\n\n  getPageButtons = (categoryName) => {\n    const { currentPage, pageData } = this.state;\n    if (currentPage === 1 &&\n      (categoryName !== 'favorites' ||\n      this.state.favorites.length > 10)) {\n        return (\n          <div className=\"section--div-button\">\n            <button\n              className=\"button-next\"\n              onClick={() => this.getNextPage(categoryName, currentPage)}\n            >\n              Next\n            </button>\n          </div>\n        );\n    } else if (currentPage < pageData[categoryName]) {\n      return (\n        <div className=\"section--div-button\">\n          <button\n            className=\"button-previous\"\n            onClick={() => this.setState({ currentPage: currentPage - 1 })}\n          >\n            Previous\n          </button>\n          <button\n            className=\"button-next\"\n            onClick={() => this.getNextPage(categoryName, currentPage)}\n          >\n            Next\n          </button>\n        </div>\n      );\n    } else if (currentPage > 1 && currentPage === pageData[categoryName]) {\n      return (\n        <div className=\"section--div-button\">\n          <button\n            className=\"button-previous\"\n            onClick={() => this.setState({ currentPage: currentPage - 1 })}\n          >\n            Previous\n          </button>\n        </div>\n      );\n    }\n    return <div className=\"section--div-button\"></div>\n  }\n\n  getNextPage = async (categoryName, currentPage) => {\n    const length = this.state[categoryName].length;\n    if (categoryName !== 'favorites' && !(length > currentPage * 10)) {\n      try {\n        const data = await api.fetchData(\n          `https://swapi.co/api/${categoryName}/?page=${currentPage + 1}`\n        );\n        const newState = await this.cleanData(categoryName, data.results);\n        newState[categoryName].unshift(...this.state[categoryName]);\n        helper.setLocalStorage(newState);\n        this.setState({\n          ...newState,\n          currentPage: currentPage + 1\n        });\n      } catch (error) {\n        this.setState({ errorStatus: error.message });\n      }\n    } else {\n      this.setState({ currentPage: currentPage + 1 });\n    }\n  }\n\n  toggleFavorite = async (card) => {\n    const { name, category, favorite } = card;\n    const newArray = this.state[category].map(categoryItem => {\n      if (categoryItem.name === name) {\n        categoryItem.favorite = !favorite;\n      }\n      return categoryItem;\n    });\n    await this.setState({ [category]: newArray });\n    helper.setLocalStorage({ [category]: newArray });\n    this.updateFavorites({ ...card, favorite: !favorite });\n  }\n\n  updateFavorites = (card) => {\n    const { favorites } = this.state;\n    if (card.favorite) {\n      helper.setLocalStorage({ favorites: [...favorites, card] });\n      this.setState({ favorites: [...favorites, card] });\n    } else {\n      const newFavorites = favorites.filter((favoritedCard) => {\n        return favoritedCard.name !== card.name;\n      });\n      helper.setLocalStorage({ favorites: newFavorites });\n      this.setState({ favorites: newFavorites });\n    }\n  }\n\n  render() {\n    const { favorites, activeCategory, film } = this.state;\n    const { title, opening_crawl, release_date } = film;\n    return (\n      <div className=\"App\">\n        <h1\n          className=\"h1\"\n          onClick={() => this.setState({ activeCategory: '' })}\n        >\n          swapi box\n        </h1>\n        <Controls\n          favCount={favorites.length}\n          activeCategory={activeCategory}\n          setActiveCategory={this.setActiveCategory}\n        />\n        {\n          activeCategory === '' &&\n            <div className=\"div--open\">\n              <h3 className=\"h3--title\">{title}</h3>\n              <p className=\"p--opening-crawl\">{opening_crawl}</p>\n              <p className=\"p--release-date\">{release_date}</p>\n            </div>\n        }\n        {\n          activeCategory !== '' && \n            <section className='section'>\n              {this.getCards(activeCategory)}\n              {this.getPageButtons(activeCategory)}\n            </section>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}